//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
    provider = "postgresql"
    url = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum PackPriceSource {
    STEAM
    GAIJIN
}

enum RarityImportKey {
    BASE
    COMMON
    RARE
    VERY_RARE
    EPIC
    LEGENDARY
    EXOTIC
}

enum UserRole {
    USER
    CONTRIBUTOR
    ADMIN
}

/// @@allow('read', true)
/// @@allow('create,update', auth().role == 'ADMIN' || auth().role == 'CONTRIBUTOR')
/// @@allow('delete', auth().role == 'ADMIN')
model Release {
    id Int @id() @default(autoincrement())
    name String
    xoVersion String?
    build String?
    description String?
    battlePass String?
    url String?
    startDate DateTime?
    endDate DateTime?
    active Boolean @default(true)
    itemStats ItemStats[]
    recipes Recipe[]
    packs Pack[]
}

/// @@allow('read', true)
/// @@allow('create,update', auth().role == 'ADMIN' || auth().role == 'CONTRIBUTOR')
/// @@allow('delete', auth().role == 'ADMIN')
model Recipe {
    id Int @id() @default(autoincrement())
    name String @default("Recipe_Primary")
    item Item @relation(fields: [itemId], references: [id])
    itemId Int
    quantity Int
    release Release? @relation(fields: [releaseId], references: [id])
    releaseId Int @default(1)
    craftCost Int?
    timestamp DateTime? @default(now())
    active Boolean @default(true)
    ingredients RecipeItem[]
}

/// @@allow('read', true)
/// @@allow('create,update,delete', auth().role == 'ADMIN' || auth().role == 'CONTRIBUTOR')
model RecipeItem {
    id Int @id() @default(autoincrement())
    recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
    recipeId Int
    item Item @relation(fields: [itemId], references: [id])
    itemId Int
    quantity Int
}

/// @@allow('read', true)
/// @@allow('create,update', auth().role == 'ADMIN' || auth().role == 'CONTRIBUTOR')
/// @@allow('delete', auth().role == 'ADMIN')
model Pack {
    id Int @id() @default(autoincrement())
    name String
    description String?
    steamKey String?
    gaijinKey String?
    key String?
    coins Int
    release Release? @relation(fields: [releaseId], references: [id])
    releaseId Int @default(1)
    active Boolean @default(true)
    items PackItem[]
    packPrices PackPrice[]

    @@unique([steamKey])
    @@unique([gaijinKey])
}

/// @@allow('read', true)
/// @@allow('create,update,delete', auth().role == 'ADMIN' || auth().role == 'CONTRIBUTOR')
model PackItem {
    id Int @id() @default(autoincrement())
    pack Pack @relation(fields: [packId], references: [id], onDelete: Cascade)
    packId Int
    item Item @relation(fields: [itemId], references: [id])
    itemId Int
    quantity Int
}

/// @@allow('read', true)
/// @@allow('create,update,delete', auth().role == 'ADMIN')
model PackPrice {
    id Int @id() @default(autoincrement())
    pack Pack @relation(fields: [packId], references: [id], onDelete: Cascade)
    packId Int
    source PackPriceSource
    key String
    timestamp DateTime @default(now())
    currencyCode String
    price Int
    priceOriginal Int?
    discount Int?
}

/// @@allow('read', true)
/// @@allow('create,update,delete', auth().role == 'ADMIN')
model Category {
    id Int @id() @default(autoincrement())
    name String
    items Item[]
    translations Translation[]

    @@unique([name])
}

/// @@allow('read', true)
/// @@allow('create,update,delete', auth().role == 'ADMIN')
model Faction {
    id Int @id() @default(autoincrement())
    name String
    items Item[]
}

/// @@allow('read', true)
/// @@allow('create,update,delete', auth().role == 'ADMIN')
model Type {
    id Int @id() @default(autoincrement())
    name String
    items Item[]
    translations Translation[]

    @@unique([name])
}

/// @@allow('read', true)
/// @@allow('create,update,delete', auth().role == 'ADMIN')
model Rarity {
    id Int @id() @default(autoincrement())
    name String
    importKey RarityImportKey
    primaryColor String
    secondaryColor String
    items Item[]
}

/// @@allow('read', true)
/// @@allow('create,update,delete', auth().role == 'ADMIN')
model Item {
    id Int @id() @default(autoincrement())
    oldId Int?
    name String
    marketDef String?
    quantity Int
    type Type @relation(fields: [typeId], references: [id])
    typeId Int
    oldTypeId Int?
    category Category @relation(fields: [categoryId], references: [id])
    categoryId Int
    faction Faction @relation(fields: [factionId], references: [id])
    factionId Int
    rarity Rarity @relation(fields: [rarityId], references: [id])
    rarityId Int
    level Int @default(0)
    sellPriceMin Int?
    sellOrders Int?
    buyPriceMax Int?
    buyOrders Int?
    craftCost Int?
    timestamp DateTime? @default(now())
    saleable Boolean @default(true)
    active Boolean @default(true)
    logId Int?
    itemStats ItemStats[]
    market Market[]
    badgeExchange BadgeExchange[]
    recipes Recipe[]
    recipeItems RecipeItem[]
    packItems PackItem[]
    itemSynergies SynergyItem[]
    translations Translation[]

    @@unique([name])
    @@unique([marketDef])
}

/// @@allow('read', true)
/// @@allow('create,update', auth().role == 'ADMIN' || auth().role == 'CONTRIBUTOR')
/// @@allow('delete', auth().role == 'ADMIN')
model ItemStats {
    id Int @id() @default(autoincrement())
    item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
    itemId Int
    user User @relation(fields: [userId], references: [id])
    userId String
    release Release? @relation(fields: [releaseId], references: [id])
    releaseId Int @default(1)
    timestamp DateTime @default(now())
    description String?
    increasesDurability Int?
    increasesReputationPercent Int?
    topSpeed Int?
    ps Int?
    damage Float?
    fireRate Float?
    range Float?
    accuracy Float?
    timeToOverheating Float?
    maxAmmo Int?
    blastPower Float?
    addsEnergy Int?
    tonnage Int?
    massLimit Int?
    maxCabinSpeed Int?
    maxChassisSpeed Int?
    power Int?
    cabinPower Float?
    fuelReserves Int?
    featureBulletPercent Int?
    featureMeleePercent Int?
    featureBlastPercent Int?
    featureFirePercent Int?
    featurePassthroughPercent Int?
    durability Int?
    energyDrain Int?
    mass Int?
    perks String?
}

/// @@allow('read', true)
/// @@allow('create,update', auth().role == 'ADMIN' || auth().role == 'CONTRIBUTOR')
/// @@allow('delete', auth().role == 'ADMIN')
model Synergy {
    id Int @id() @default(autoincrement())
    name String
    synergyItems SynergyItem[]
}

/// @@allow('read', true)
/// @@allow('create,update, delete', auth().role == 'ADMIN' || auth().role == 'CONTRIBUTOR')
model SynergyItem {
    synergy Synergy @relation(fields: [synergyId], references: [id], onDelete: Cascade)
    synergyId Int
    item Item @relation(fields: [itemId], references: [id])
    itemId Int

    @@id([synergyId, itemId])
}

/// @@allow('read', true)
/// @@allow('create,update,delete', auth().role == 'ADMIN')
model Market {
    id Int @id() @default(autoincrement())
    item Item @relation(fields: [itemId], references: [id])
    itemId Int
    /// @omit
    marketDef String
    sellPriceMin Int
    sellOrders Int
    buyPriceMax Int
    buyOrders Int
    craftCost Int?
    timestamp DateTime @default(now())
}

/// @@allow('read', true)
/// @@allow('create,update', auth().role == 'ADMIN' || auth().role == 'CONTRIBUTOR')
/// @@allow('delete', auth().role == 'ADMIN')
model BadgeExchange {
    id Int @id() @default(autoincrement())
    item Item @relation(fields: [itemId], references: [id])
    itemId Int
    quantity Int
    badges Int
    active Boolean @default(true)
    timestamp DateTime @default(now())
}

/// @@allow('read', true)
/// @@allow('create,update', auth().role == 'ADMIN' || auth().role == 'CONTRIBUTOR')
/// @@allow('delete', auth().role == 'ADMIN')
model Log {
    id Int @id() @default(autoincrement())
    timestamp DateTime @default(now())
    user User @relation(fields: [userId], references: [id])
    userId String
    tableChanged String
    recordId Int
    record Json
}

model Account {
    id String @id() @default(cuid())
    userId String
    type String
    provider String
    providerAccountId String
    refresh_token String?
    access_token String?
    expires_at Int?
    token_type String?
    scope String?
    id_token String?
    session_state String?
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id String @id() @default(cuid())
    sessionToken String @unique()
    userId String
    expires DateTime
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// @@allow('read,create', true)
/// @@allow('delete', auth() == this || auth().role == 'ADMIN')
/// @@allow('update', auth().role == 'ADMIN')
model User {
    id String @id() @default(cuid())
    name String?
    role UserRole @default(USER)
    /// @omit
    email String? @unique()
    /// @omit
    emailVerified DateTime?
    /// @omit
    image String?
    accounts Account[]
    sessions Session[]
    itemStats ItemStats[]
    log Log[]
}

model VerificationToken {
    identifier String
    token String @unique()
    expires DateTime

    @@unique([identifier, token])
}

/// @@allow('read', true)
/// @@allow('create,update,delete', auth().role == 'ADMIN')
model Country {
    code String @id()
    name String
    currency String
    currencyCode String
}

/// @@allow('read', true)
/// @@allow('create,update,delete', auth().role == 'ADMIN')
model Language {
    code String @id()
    name String
    translations Translation[]
}

/// @@allow('read', true)
/// @@allow('create,update,delete', auth().role == 'ADMIN')
model Translation {
    id Int @id() @default(autoincrement())
    language Language @relation(fields: [languageCode], references: [code])
    languageCode String
    key String
    value String
    categories Category[]
    types Type[]
    items Item[]

    @@unique([languageCode, key])
}